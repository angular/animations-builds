{"version":3,"file":"_private_export-chunk.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/animations/src/players/animation_group_player.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {AnimationPlayer} from './animation_player';\n\n/**\n * A programmatic controller for a group of reusable animations.\n * Used internally to control animations.\n *\n * @see {@link AnimationPlayer}\n * @see {@link animations/group group}\n *\n */\nexport class AnimationGroupPlayer implements AnimationPlayer {\n  private _onDoneFns: Function[] = [];\n  private _onStartFns: Function[] = [];\n  private _finished = false;\n  private _started = false;\n  private _destroyed = false;\n  private _onDestroyFns: Function[] = [];\n\n  public parentPlayer: AnimationPlayer | null = null;\n  public totalTime: number = 0;\n  public readonly players: AnimationPlayer[];\n\n  constructor(_players: AnimationPlayer[]) {\n    this.players = _players;\n    let doneCount = 0;\n    let destroyCount = 0;\n    let startCount = 0;\n    const total = this.players.length;\n\n    if (total == 0) {\n      queueMicrotask(() => this._onFinish());\n    } else {\n      this.players.forEach((player) => {\n        player.onDone(() => {\n          if (++doneCount == total) {\n            this._onFinish();\n          }\n        });\n        player.onDestroy(() => {\n          if (++destroyCount == total) {\n            this._onDestroy();\n          }\n        });\n        player.onStart(() => {\n          if (++startCount == total) {\n            this._onStart();\n          }\n        });\n      });\n    }\n\n    this.totalTime = this.players.reduce((time, player) => Math.max(time, player.totalTime), 0);\n  }\n\n  private _onFinish() {\n    if (!this._finished) {\n      this._finished = true;\n      this._onDoneFns.forEach((fn) => fn());\n      this._onDoneFns = [];\n    }\n  }\n\n  init(): void {\n    this.players.forEach((player) => player.init());\n  }\n\n  onStart(fn: () => void): void {\n    this._onStartFns.push(fn);\n  }\n\n  private _onStart() {\n    if (!this.hasStarted()) {\n      this._started = true;\n      this._onStartFns.forEach((fn) => fn());\n      this._onStartFns = [];\n    }\n  }\n\n  onDone(fn: () => void): void {\n    this._onDoneFns.push(fn);\n  }\n\n  onDestroy(fn: () => void): void {\n    this._onDestroyFns.push(fn);\n  }\n\n  hasStarted() {\n    return this._started;\n  }\n\n  play() {\n    if (!this.parentPlayer) {\n      this.init();\n    }\n    this._onStart();\n    this.players.forEach((player) => player.play());\n  }\n\n  pause(): void {\n    this.players.forEach((player) => player.pause());\n  }\n\n  restart(): void {\n    this.players.forEach((player) => player.restart());\n  }\n\n  finish(): void {\n    this._onFinish();\n    this.players.forEach((player) => player.finish());\n  }\n\n  destroy(): void {\n    this._onDestroy();\n  }\n\n  private _onDestroy() {\n    if (!this._destroyed) {\n      this._destroyed = true;\n      this._onFinish();\n      this.players.forEach((player) => player.destroy());\n      this._onDestroyFns.forEach((fn) => fn());\n      this._onDestroyFns = [];\n    }\n  }\n\n  reset(): void {\n    this.players.forEach((player) => player.reset());\n    this._destroyed = false;\n    this._finished = false;\n    this._started = false;\n  }\n\n  setPosition(p: number): void {\n    const timeAtPosition = p * this.totalTime;\n    this.players.forEach((player) => {\n      const position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;\n      player.setPosition(position);\n    });\n  }\n\n  getPosition(): number {\n    const longestPlayer = this.players.reduce(\n      (longestSoFar: AnimationPlayer | null, player: AnimationPlayer) => {\n        const newPlayerIsLongest =\n          longestSoFar === null || player.totalTime > longestSoFar.totalTime;\n        return newPlayerIsLongest ? player : longestSoFar;\n      },\n      null,\n    );\n    return longestPlayer != null ? longestPlayer.getPosition() : 0;\n  }\n\n  beforeDestroy(): void {\n    this.players.forEach((player) => {\n      if (player.beforeDestroy) {\n        player.beforeDestroy();\n      }\n    });\n  }\n\n  /** @internal */\n  triggerCallback(phaseName: string): void {\n    const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n    methods.forEach((fn) => fn());\n    methods.length = 0;\n  }\n}\n"],"names":["_onDestroyFns","parentPlayer","totalTime","players","constructor","_players","doneCount","destroyCount","startCount","total","length","queueMicrotask","_onFinish","forEach","player","onDone","onDestroy","onStart","_onStart","reduce","time","Math","max","_finished","_onDoneFns","fn","init","push","hasStarted","_started","_onStartFns","play","pause","restart","finish","destroy","_onDestroy","_destroyed","reset","setPosition","p","timeAtPosition","position","min"],"mappings":"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"}